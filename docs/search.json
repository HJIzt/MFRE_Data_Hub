[
  {
    "objectID": "posts/my-new-post/index.html",
    "href": "posts/my-new-post/index.html",
    "title": "Sample Post 1",
    "section": "",
    "text": "This is the first sample blogpost for the MFRE Data Hub.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MFRE Data Hub",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 31, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nSample Post 1\n\n\n\n\n\n\n\ncode\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nMar 31, 2023\n\n\nHarry Izatt\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "MFRE is a unique one year masters degree combining Economics, Policy and Business as understood from an Agriculture, Food, Natural Resources and Environmental perspective. This professional degree combines the economic rigour of a Masters in Economics, with the business elements of MBA programs, and equips you to analyze real-world environmental issues through applied economics and quantitative skills.\nWith an ever-increasing focus on empirical studies and data analysis, we have created the Data Hub as a central reference for our students to access tutorials for working on their quantitative skills, as well as curated datasets ideal for work in the Food and Resource sectors."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "introduction_to_python.html",
    "href": "introduction_to_python.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Learning Objectives:\n\nData types\nControl flow\nProject: Writing a loop\n\n\n1+1\n\n2"
  },
  {
    "objectID": "posts/sample-post-1/index.html",
    "href": "posts/sample-post-1/index.html",
    "title": "Sample Post 1",
    "section": "",
    "text": "This is the first sample blogpost for the MFRE Data Hub.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "query_function.html",
    "href": "query_function.html",
    "title": "Yahoo Finance Query Function",
    "section": "",
    "text": "# uncomment and run to install the less common libraries used here\n\n#!pip install yahoo-fin\n#!pip install seaborn\n\n\nfrom yahoo_fin import stock_info as si\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom IPython.display import Image\nfrom IPython.core.display import HTML \n\n\n# lets us view all the columns of very wide dataframes\npd.set_option('display.max_columns', None)\n\n\nimport inspect\ninspect.getargspec(si.get_cash_flow)\n\nC:\\Users\\jizatt\\AppData\\Local\\Temp\\ipykernel_20732\\1159952983.py:2: DeprecationWarning: inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()\n  inspect.getargspec(si.get_cash_flow)\n\n\nArgSpec(args=['ticker', 'yearly'], varargs=None, keywords=None, defaults=(True,))\n\n\n\nSample outputs from yahoo_fin stock_info functions\nSince we’re new to this module, it’s worth playing around with it a bit to see how it works. We’re most interested in what info it outputs, and in what format.\n\n# this is what a cashflow query looks like, for sample company Google\n\ncash_flow = si.get_cash_flow(\"goog\")\ncash_flow\n\n\n\n\n\n\n\nendDate\n2021-12-31\n2020-12-31\n2019-12-31\n2018-12-31\n\n\nBreakdown\n\n\n\n\n\n\n\n\ninvestments\n-8806000000\n-9822000000\n-4017000000\n-1972000000\n\n\nchangeToLiabilities\n1057000000\n1329000000\n465000000\n1438000000\n\n\ntotalCashflowsFromInvestingActivities\n-35523000000\n-32773000000\n-29491000000\n-28504000000\n\n\nnetBorrowings\n-1236000000\n9661000000\n-268000000\n-61000000\n\n\ntotalCashFromFinancingActivities\n-61362000000\n-24408000000\n-23209000000\n-13179000000\n\n\nchangeToOperatingActivities\n7140000000\n5813000000\n7822000000\n7890000000\n\n\nnetIncome\n76033000000\n40269000000\n34343000000\n30736000000\n\n\nchangeInCash\n-5520000000\n7967000000\n1797000000\n5986000000\n\n\nrepurchaseOfStock\n-50274000000\n-31149000000\n-18396000000\n-9075000000\n\n\neffectOfExchangeRate\n-287000000\n24000000\n-23000000\n-302000000\n\n\ntotalCashFromOperatingActivities\n91652000000\n65124000000\n54520000000\n47971000000\n\n\ndepreciation\n12430000000\n13679000000\n11651000000\n9029000000\n\n\notherCashflowsFromInvestingActivities\n541000000\n68000000\n589000000\n98000000\n\n\nchangeToAccountReceivables\n-9095000000\n-6524000000\n-4340000000\n-2169000000\n\n\notherCashflowsFromFinancingActivities\n-9852000000\n-2920000000\n-4545000000\n-4043000000\n\n\nchangeToNetincome\n4712000000\n9349000000\n7707000000\n3298000000\n\n\ncapitalExpenditures\n-24640000000\n-22281000000\n-23548000000\n-25139000000\n\n\n\n\n\n\n\n\n# sample balance sheet query\n\nbalance_sheet = si.get_balance_sheet(\"goog\")\nbalance_sheet\n\n\n\n\n\n\n\nendDate\n2021-12-31\n2020-12-31\n2019-12-31\n2018-12-31\n\n\nBreakdown\n\n\n\n\n\n\n\n\nintangibleAssets\n1.417000e+09\n1.445000e+09\n1.979000e+09\n2.220000e+09\n\n\ntotalLiab\n1.076330e+11\n9.707200e+10\n7.446700e+10\n5.516400e+10\n\n\ntotalStockholderEquity\n2.516350e+11\n2.225440e+11\n2.014420e+11\n1.776280e+11\n\n\notherCurrentLiab\n2.920800e+10\n2.800600e+10\n2.215900e+10\n1.761200e+10\n\n\ntotalAssets\n3.592680e+11\n3.196160e+11\n2.759090e+11\n2.327920e+11\n\n\ncommonStock\n6.177400e+10\n5.851000e+10\n5.055200e+10\n4.504900e+10\n\n\notherCurrentAssets\n7.054000e+09\n5.490000e+09\n4.412000e+09\n4.236000e+09\n\n\nretainedEarnings\n1.914840e+11\n1.634010e+11\n1.521220e+11\n1.348850e+11\n\n\notherLiab\n1.717300e+10\n1.516000e+10\n1.447800e+10\n1.653200e+10\n\n\ngoodWill\n2.295600e+10\n2.117500e+10\n2.062400e+10\n1.788800e+10\n\n\ntreasuryStock\n-1.623000e+09\n6.330000e+08\n-1.232000e+09\n-2.306000e+09\n\n\notherAssets\n6.645000e+09\n5.037000e+09\n3.063000e+09\n3.430000e+09\n\n\ncash\n2.094500e+10\n2.646500e+10\n1.849800e+10\n1.670100e+10\n\n\ntotalCurrentLiabilities\n6.425400e+10\n5.683400e+10\n4.522100e+10\n3.462000e+10\n\n\ndeferredLongTermAssetCharges\n1.284000e+09\n1.084000e+09\n7.210000e+08\n7.370000e+08\n\n\notherStockholderEquity\n-1.623000e+09\n6.330000e+08\n-1.232000e+09\n-2.306000e+09\n\n\npropertyPlantEquipment\n1.105580e+11\n9.696000e+10\n8.458700e+10\n5.971900e+10\n\n\ntotalCurrentAssets\n1.881430e+11\n1.742960e+11\n1.525780e+11\n1.356760e+11\n\n\nlongTermInvestments\n2.954900e+10\n2.070300e+10\n1.307800e+10\n1.385900e+10\n\n\nnetTangibleAssets\n2.272620e+11\n1.999240e+11\n1.788390e+11\n1.575200e+11\n\n\nshortTermInvestments\n1.187040e+11\n1.102290e+11\n1.011770e+11\n9.243900e+10\n\n\nnetReceivables\n4.027000e+10\n3.138400e+10\n2.749200e+10\n2.119300e+10\n\n\nlongTermDebt\n1.284400e+10\n1.283200e+10\n3.958000e+09\n3.950000e+09\n\n\ninventory\n1.170000e+09\n7.280000e+08\n9.990000e+08\n1.107000e+09\n\n\naccountsPayable\n6.037000e+09\n5.589000e+09\n5.561000e+09\n4.378000e+09\n\n\nshortLongTermDebt\nNaN\n9.990000e+08\nNaN\nNaN\n\n\n\n\n\n\n\nThese are good. They have very similar data outputs to what we fed into PowerQuery, so we can make a similar datasheet with some manipulation.\n\n\nCreating fundamentals_querier()\nI want a function that gets us to the same starting point as where Power Query leaves us - with the cashflow, balance sheet, and income statement of whatever desired company tickers we input.\nIt needs to do several things:\n\nTake a list of stock tickers\nFor each ticker, query cashflow, balance sheet, and income statement\nJoin each company’s reports together\nConcatenate these (with years matched) together for all companies queried\nReturn this dataframe\n\n\nimport datetime\nimport numpy as np\n\n\ndef fundamentals_querier(tickers):\n    \"\"\"_summary_\n\n    Args:\n        tickers (list of strings): a list of the string tickers of desired companies\n    \"\"\"\n    # create the dictionary I'm associating the tickers and their fundamentals data in\n    fundamentals_dict = {}\n    \n    # execute a set of operations for every individual `ticker` in the list `tickers` \n    for ticker in tickers:\n        # query the three dataframes\n        cash_flow = si.get_cash_flow(ticker)\n        balance_sheet = si.get_balance_sheet(ticker)\n        income_statement = si.get_income_statement(ticker)\n        \n        # concatenate the above three\n        ticker_fundamentals = pd.concat([cash_flow, balance_sheet, income_statement])\n        \n        # change the long date columns to overall year columns\n        ticker_fundamentals.columns = pd.to_datetime(ticker_fundamentals.columns.values).year\n        \n        # assign name of the company to the data\n        ticker_fundamentals[\"ticker\"] = ticker\n        \n        # add the ticker and fundamentals to the dictionary\n        fundamentals_dict[ticker] = ticker_fundamentals\n        \n    \n    # create fundamentals_df, which is all the data from the different tickers, concatenated into one\n    fundamentals_df = pd.concat(fundamentals_dict.values())\n    \n    # return the fundamentals_df. not print(), since we want to do more with it later!\n    return fundamentals_df\n\nIf I wanted, I could just run the central block of code multiple times for every stock ticker to analyze, or keep it as a non-function For loop. But writing this up as a function lets us very easily do it multiple times, and I could import this function to other Python work and easily apply it there. So, building it as a function makes some sense.\n\n\nSample Case: Checking fundamentals of big tech companies\nWe’re going to do the same analysis here as we did in Excel. It’s going to also take some cleaning of the dataframe, but we’ll arrive in the same place!\nFor no reason in particular, I decided to use a series of “big tech” companies as our sample. If you change the tickers input to big_tech, the entire notebook still runs through correctly, although some variable and plot names may no longer make much sense.\n\n# first we query our function above to get our data\n\nbig_tech = fundamentals_querier([\"aapl\", \"amzn\", \"goog\", \"msft\", \"meta\"])\nbig_tech\n\n\n\n\n\n\n\n\n2022\n2021\n2020\n2019\nticker\n2018\n\n\nBreakdown\n\n\n\n\n\n\n\n\n\n\ninvestments\n-9560000000.0\n-3075000000.0\n5453000000.0\n58093000000.0\naapl\nNaN\n\n\nchangeToLiabilities\n9926000000.0\n14002000000.0\n-1981000000.0\n-2548000000.0\naapl\nNaN\n\n\ntotalCashflowsFromInvestingActivities\n-22354000000.0\n-14545000000.0\n-4289000000.0\n45896000000.0\naapl\nNaN\n\n\nnetBorrowings\n-123000000.0\n12665000000.0\n2499000000.0\n-7819000000.0\naapl\nNaN\n\n\ntotalCashFromFinancingActivities\n-110749000000.0\n-93353000000.0\n-86820000000.0\n-90976000000.0\naapl\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\ncostOfRevenue\nNaN\n22649000000\n16692000000\n12770000000\nmeta\n9355000000\n\n\ntotalOtherIncomeExpenseNet\nNaN\n531000000\n509000000\n-4174000000\nmeta\n448000000\n\n\ndiscontinuedOperations\nNaN\nNone\nNone\nNone\nmeta\nNone\n\n\nnetIncomeFromContinuingOps\nNaN\n39370000000\n29146000000\n18485000000\nmeta\n22112000000\n\n\nnetIncomeApplicableToCommonShares\nNaN\n39370000000\n29146000000\n18485000000\nmeta\n22111000000\n\n\n\n\n323 rows × 6 columns\n\n\n\n\n\nSo can we plot our data?\nWe can’t plot anything useful, yet.\nIn Pandas, you can very easily do operations on entire columns at once. We can add, subtract, multiply, and divide columns just like numbers in basic Python. This is important for our calculated fields.\nFor example;\ndf1[\"new_column\"] = df1[\"column_a\"]*df1[\"column_b\"]\nThis creates \"new_column\" in df1, where each row is equal to that row’s \"column_a\" values multiplied by the row’s \"column_b\" value.\nFor this to be useful, the columns must all be different variables, and their rows must be meaningfully related. Since we want to compute the financial variables for a company in a given year, we want each row to correspond to a given company in one year.\nRight now, big_tech has its variable names as a row variable, while the years and companies are columns. We need to do some work first.\n\n\nTidy vs Untidy data\nFrom R for Data Science:\nThere are three interrelated rules which make a dataset tidy:\n\n1. Each variable must have its own column.\n2. Each observation must have its own row.\n3. Each value must have its own cell.\nAt the end of the PowerQuery process, the data was tidy.\n\n\nVisualization of Tidy Data Rules\n\nImage(url= \"https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png\")\n\n\n\n\n\n\nWhy is Tidy Data good?\nIn tidy data there is a meaningful relation to values in the same column (they’re for the same variable) and values in the same row (they belong to the same observation).\nThis means you can input a column to plot, or as a variable in a model, or apply an aggregation like finding the mean or variance.\nIt also allows you to derive new values from your data by multiplying, dividing, adding, or subtracting column values from each other, like our calculated items in Excel.\n\n\nProblems with big_tech\nThere are two main ones, from a tidy data perspective.\n\nThe year variable is spread out across multiple columns.\nThe different financial variables in the Breakdown column should be each their own column.\n\nGenerating our calculated fields and plotting them will be a hassle at present. We’ll handle these problems in order.\n\n\nConsolidating years into one variable\nThis table is in wide format - we’ve got multiple years of the same variable in each row.\nThe Pandas melt function lets us specify fixed identifier variables. These are used to state things like entities (eg. which company is being observed), variable names, or other features that link the identity of observations. Then, the other columns get made into a new variable, which we specify the name of with the var_name argument.\nSo in our case, we list \"ticker\" and \"Breakdown\" as our id_vars, and the new var_name as \"Year\". Melt keeps the \"ticker\" and \"Breakdown\" columns, but each pair gets their year values turned into a separate row, with the corresponding variable value as the new \"value\" column.\n\nbig_tech_melt = pd.melt(big_tech.reset_index(), id_vars = [\"ticker\", \"Breakdown\"], var_name = \"Year\")\nbig_tech_melt\n\n\n\n\n\n\n\n\nticker\nBreakdown\nYear\nvalue\n\n\n\n\n0\naapl\ninvestments\n2022\n-9560000000.0\n\n\n1\naapl\nchangeToLiabilities\n2022\n9926000000.0\n\n\n2\naapl\ntotalCashflowsFromInvestingActivities\n2022\n-22354000000.0\n\n\n3\naapl\nnetBorrowings\n2022\n-123000000.0\n\n\n4\naapl\ntotalCashFromFinancingActivities\n2022\n-110749000000.0\n\n\n...\n...\n...\n...\n...\n\n\n1610\nmeta\ncostOfRevenue\n2018\n9355000000\n\n\n1611\nmeta\ntotalOtherIncomeExpenseNet\n2018\n448000000\n\n\n1612\nmeta\ndiscontinuedOperations\n2018\nNone\n\n\n1613\nmeta\nnetIncomeFromContinuingOps\n2018\n22112000000\n\n\n1614\nmeta\nnetIncomeApplicableToCommonShares\n2018\n22111000000\n\n\n\n\n1615 rows × 4 columns\n\n\n\nBefore, Apple had one row for all its investment values, from 2018-2022. Now it has 5 rows for this variable, each corresponding to one year.\nThis gets us halfway there - no variables are split along multiple columns. However, there are some observations (company-year releases) that are in multiple rows.\n\n\nSplitting Breakdown into columns to complete Tidy Data process\nSo now we’ve got an equivalent to the dataframe at the end of the PowerQuery operations. Each row is one company’s value of a certain variable (i.e. Breakdown) in a certain year.\nNext we want to complete the pivot table. We can’t set filters in the Pandas pivot_table function, but we actually swapped the years variable to the columns anyways when we did our analysis. So, this will work fine for what we need.\n\ntable_2_equiv = pd.pivot_table(big_tech_melt, values = \"value\", columns = \"Breakdown\", index = [\"ticker\", \"Year\"], aggfunc = np.sum)\ntable_2_equiv\n\n\n\n\n\n\n\n\nBreakdown\naccountsPayable\ncapitalExpenditures\ncapitalSurplus\ncash\nchangeInCash\nchangeToAccountReceivables\nchangeToInventory\nchangeToLiabilities\nchangeToNetincome\nchangeToOperatingActivities\ncommonStock\ncostOfRevenue\ndeferredLongTermAssetCharges\ndepreciation\ndiscontinuedOperations\ndividendsPaid\nebit\neffectOfAccountingCharges\neffectOfExchangeRate\nextraordinaryItems\ngoodWill\ngrossProfit\nincomeBeforeTax\nincomeTaxExpense\nintangibleAssets\ninterestExpense\ninventory\ninvestments\nissuanceOfStock\nlongTermDebt\nlongTermInvestments\nminorityInterest\nnetBorrowings\nnetIncome\nnetIncomeApplicableToCommonShares\nnetIncomeFromContinuingOps\nnetReceivables\nnetTangibleAssets\nnonRecurring\noperatingIncome\notherAssets\notherCashflowsFromFinancingActivities\notherCashflowsFromInvestingActivities\notherCurrentAssets\notherCurrentLiab\notherItems\notherLiab\notherOperatingExpenses\notherStockholderEquity\npropertyPlantEquipment\nrepurchaseOfStock\nresearchDevelopment\nretainedEarnings\nsellingGeneralAdministrative\nshortLongTermDebt\nshortTermInvestments\ntotalAssets\ntotalCashFromFinancingActivities\ntotalCashFromOperatingActivities\ntotalCashflowsFromInvestingActivities\ntotalCurrentAssets\ntotalCurrentLiabilities\ntotalLiab\ntotalOperatingExpenses\ntotalOtherIncomeExpenseNet\ntotalRevenue\ntotalStockholderEquity\ntreasuryStock\n\n\nticker\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naapl\n2018\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.0\nNaN\n0.0\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n\n\n2019\n4.623600e+10\n-1.049500e+10\nNaN\n4.884400e+10\n2.431100e+10\n2.450000e+08\n-2.890000e+08\n-2.548000e+09\n5.076000e+09\n-8.960000e+08\n4.517400e+10\n1.617820e+11\nNaN\n1.254700e+10\n0.0\n-1.411900e+10\n6.393000e+10\n0.0\nNaN\n0.0\nNaN\n9.839200e+10\n6.573700e+10\n1.048100e+10\nNaN\n-3.576000e+09\n4.106000e+09\n5.809300e+10\n7.810000e+08\n9.180700e+10\n1.053410e+11\n0.0\n-7.819000e+09\n1.105120e+11\n5.525600e+10\n5.525600e+10\n4.580400e+10\n9.048800e+10\n0.0\n6.393000e+10\n3.297800e+10\n-1.050000e+08\n-1.078000e+09\n1.235200e+10\n4.324200e+10\n0.0\n5.050300e+10\n0.0\n-5.840000e+08\n3.737800e+10\n-6.971400e+10\n1.621700e+10\n4.589800e+10\n1.824500e+10\n1.026000e+10\n5.171300e+10\n3.385160e+11\n-9.097600e+10\n6.939100e+10\n4.589600e+10\n1.628190e+11\n1.057180e+11\n2.480280e+11\n1.962440e+11\n1.807000e+09\n2.601740e+11\n9.048800e+10\n-5.840000e+08\n\n\n2020\n4.229600e+10\n-7.309000e+09\nNaN\n3.801600e+10\n-1.043500e+10\n6.917000e+09\n-1.270000e+08\n-1.981000e+09\n6.517000e+09\n8.810000e+08\n5.077900e+10\n1.695590e+11\nNaN\n1.105600e+10\n0.0\n-1.408100e+10\n6.628800e+10\n0.0\nNaN\n0.0\nNaN\n1.049560e+11\n6.709100e+10\n9.680000e+09\nNaN\n-2.873000e+09\n4.061000e+09\n5.453000e+09\n0.000000e+00\n9.866700e+10\n1.008870e+11\n0.0\n2.499000e+09\n1.148220e+11\n5.741100e+10\n5.741100e+10\n3.744500e+10\n6.533900e+10\n0.0\n6.628800e+10\n3.395200e+10\n7.540000e+08\n-9.090000e+08\n1.126400e+10\n4.786700e+10\n0.0\n4.610800e+10\n0.0\n-4.060000e+08\n4.533600e+10\n-7.599200e+10\n1.875200e+10\n1.496600e+10\n1.991600e+10\n8.773000e+09\n5.292700e+10\n3.238880e+11\n-8.682000e+10\n8.067400e+10\n-4.289000e+09\n1.437130e+11\n1.053920e+11\n2.585490e+11\n2.082270e+11\n8.030000e+08\n2.745150e+11\n6.533900e+10\n-4.060000e+08\n\n\n2021\n5.476300e+10\n-1.108500e+10\nNaN\n3.494000e+10\n-3.860000e+09\n-1.012500e+10\n-2.642000e+09\n1.400200e+10\n2.985000e+09\n-6.146000e+09\n5.736500e+10\n2.129810e+11\nNaN\n1.128400e+10\n0.0\n-1.446700e+10\n1.089490e+11\n0.0\nNaN\n0.0\nNaN\n1.528360e+11\n1.092070e+11\n1.452700e+10\nNaN\n-2.645000e+09\n6.580000e+09\n-3.075000e+09\n0.000000e+00\n1.091060e+11\n1.278770e+11\n0.0\n1.266500e+10\n1.893600e+11\n9.468000e+10\n9.468000e+10\n5.150600e+10\n6.309000e+10\n0.0\n1.089490e+11\n3.876200e+10\n9.760000e+08\n-3.520000e+08\n1.411100e+10\n5.357700e+10\n0.0\n4.305000e+10\n0.0\n1.630000e+08\n4.952700e+10\n-9.252700e+10\n2.191400e+10\n5.562000e+09\n2.197300e+10\n9.613000e+09\n2.769900e+10\n3.510020e+11\n-9.335300e+10\n1.040380e+11\n-1.454500e+10\n1.348360e+11\n1.254810e+11\n2.879120e+11\n2.568680e+11\n2.580000e+08\n3.658170e+11\n6.309000e+10\n1.630000e+08\n\n\n2022\n6.411500e+10\n-1.070800e+10\nNaN\n2.364600e+10\n-1.095200e+10\n-1.823000e+09\n1.484000e+09\n9.926000e+09\n1.004400e+10\n-8.387000e+09\n6.484900e+10\n2.235460e+11\nNaN\n1.110400e+10\n0.0\n-1.484100e+10\n1.194370e+11\n0.0\nNaN\n0.0\nNaN\n1.707820e+11\n1.191030e+11\n1.930000e+10\nNaN\n-2.931000e+09\n4.946000e+09\n-9.560000e+09\n0.000000e+00\n9.895900e+10\n1.208050e+11\n0.0\n-1.230000e+08\n1.996060e+11\n9.980300e+10\n9.980300e+10\n6.093200e+10\n5.067200e+10\n0.0\n1.194370e+11\n4.401100e+10\n-1.600000e+08\n-1.780000e+09\n2.122300e+10\n6.709400e+10\n0.0\n3.839400e+10\n0.0\n-1.110900e+10\n5.253400e+10\n-9.562500e+10\n2.625100e+10\n-3.068000e+09\n2.509400e+10\n1.112800e+10\n2.465800e+10\n3.527550e+11\n-1.107490e+11\n1.221510e+11\n-2.235400e+10\n1.354050e+11\n1.539820e+11\n3.020830e+11\n2.748910e+11\n-3.340000e+08\n3.943280e+11\n5.067200e+10\n-1.110900e+10\n\n\namzn\n2018\n3.819200e+10\n-1.342700e+10\n2.679100e+10\n3.175000e+10\n1.031700e+10\n-4.615000e+09\n-1.314000e+09\n4.414000e+09\n6.352000e+09\n4.720000e+08\n5.000000e+06\n1.391560e+11\nNaN\n1.534100e+10\n0.0\nNaN\n1.242100e+10\n0.0\n-351000000.0\n0.0\n1.454800e+10\n9.373100e+10\n1.127000e+10\n1.197000e+09\n4.110000e+09\n-1.417000e+09\n1.717400e+10\n1.140000e+09\nNaN\n2.349500e+10\n7.220000e+08\n0.0\n-7.686000e+09\n2.014600e+10\n1.007300e+10\n1.007300e+10\n1.625900e+10\n2.489100e+10\n0.0\n1.242100e+10\n6.370000e+09\nNaN\n2.104000e+09\n4.180000e+08\n9.959000e+09\n0.0\n1.756300e+10\n296000000.0\n-1.035000e+09\n6.179700e+10\nNaN\n2.883700e+10\n1.962500e+10\n5.217700e+10\n1.371000e+09\n9.500000e+09\n1.626480e+11\n-7.686000e+09\n3.072300e+10\n-1.236900e+10\n7.510100e+10\n6.839100e+10\n1.190990e+11\n2.204660e+11\n-1.151000e+09\n2.328870e+11\n4.354900e+10\n-2.872000e+09\n\n\n2019\n4.718300e+10\n-1.686100e+10\n3.365800e+10\n3.609200e+10\n4.237000e+09\n-7.681000e+09\n-3.278000e+09\n9.904000e+09\n7.575000e+09\n-1.383000e+09\n5.000000e+06\n1.655360e+11\nNaN\n2.178900e+10\n0.0\nNaN\n1.454100e+10\n0.0\n70000000.0\n0.0\n1.475400e+10\n1.149860e+11\n1.396200e+10\n2.374000e+09\n4.049000e+09\n-1.600000e+09\n2.049700e+10\n-9.131000e+09\nNaN\n2.341400e+10\n2.169000e+09\n0.0\n-1.006600e+10\n2.317600e+10\n1.158800e+10\n1.158800e+10\n2.054000e+10\n4.325700e+10\n0.0\n1.454100e+10\n1.009600e+10\nNaN\n0.000000e+00\n2.760000e+08\n1.220200e+10\n0.0\n1.217100e+10\n201000000.0\n-9.860000e+08\n9.784600e+10\nNaN\n3.593100e+10\n3.122000e+10\n6.431300e+10\n1.305000e+09\n1.892900e+10\n2.252480e+11\n-1.006600e+10\n3.851400e+10\n-2.428100e+10\n9.633400e+10\n8.781200e+10\n1.631880e+11\n2.659810e+11\n-5.790000e+08\n2.805220e+11\n6.206000e+10\n-2.823000e+09\n\n\n2020\n7.253900e+10\n-4.014000e+10\n4.286500e+10\n4.212200e+10\n5.967000e+09\n-8.169000e+09\n-2.849000e+09\n1.874500e+10\n6.001000e+09\n5.754000e+09\n5.000000e+06\n2.333070e+11\nNaN\n2.525100e+10\n0.0\nNaN\n2.289900e+10\n0.0\n618000000.0\n0.0\n1.501700e+10\n1.527570e+11\n2.419400e+10\n2.863000e+09\n4.981000e+09\n-1.647000e+09\n2.379500e+10\n-2.224200e+10\nNaN\n3.521600e+10\n5.700000e+09\n0.0\n-1.104000e+09\n4.266200e+10\n2.133100e+10\n2.133100e+10\n2.430900e+10\n7.340600e+10\n0.0\n2.289900e+10\n1.209700e+10\nNaN\n0.000000e+00\n2.330000e+08\n1.526700e+10\n0.0\n1.361700e+10\n-75000000.0\n-1.800000e+08\n1.506670e+11\nNaN\n4.274000e+10\n5.255100e+10\n8.719300e+10\n1.266000e+09\n4.227400e+10\n3.211950e+11\n-1.104000e+09\n6.606400e+10\n-5.961100e+10\n1.327330e+11\n1.263850e+11\n2.277910e+11\n3.631650e+11\n1.295000e+09\n3.860640e+11\n9.340400e+10\n-2.017000e+09\n\n\n2021\n7.866400e+10\n-6.105300e+10\n5.553800e+10\n3.622000e+10\n-5.900000e+09\n-1.816300e+10\n-9.487000e+09\n5.916000e+09\n-1.722000e+09\n2.123000e+09\n5.000000e+06\n2.723440e+11\nNaN\n3.429600e+10\n0.0\nNaN\n2.487900e+10\n0.0\n-364000000.0\n0.0\n1.537100e+10\n1.974780e+11\n3.815500e+10\n4.791000e+09\n5.107000e+09\n-1.809000e+09\n3.264000e+10\n-7.730000e+08\nNaN\n5.494400e+10\n4.003000e+09\n0.0\n6.291000e+09\n6.672800e+10\n3.336400e+10\n3.336400e+10\n3.264900e+10\n1.177670e+11\n0.0\n2.487900e+10\n1.812500e+10\nNaN\n0.000000e+00\n2.420000e+08\n1.802700e+10\n0.0\n1.744300e+10\n62000000.0\n-1.376000e+09\n2.163630e+11\nNaN\n5.605200e+10\n8.591500e+10\n1.164850e+11\n1.687000e+09\n5.982900e+10\n4.205490e+11\n6.291000e+09\n4.632700e+10\n-5.815400e+10\n1.615800e+11\n1.422660e+11\n2.823040e+11\n4.449430e+11\n1.327600e+10\n4.698220e+11\n1.382450e+11\n-3.213000e+09\n\n\n2022\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.0\nNaN\n0.000000e+00\n0.0\n0.0\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n\n\ngoog\n2018\n4.378000e+09\n-2.513900e+10\nNaN\n1.670100e+10\n5.986000e+09\n-2.169000e+09\nNaN\n1.438000e+09\n3.298000e+09\n7.890000e+09\n4.504900e+10\n5.954900e+10\n7.370000e+08\n9.029000e+09\n0.0\nNaN\n3.259500e+10\n0.0\n-302000000.0\n0.0\n1.788800e+10\n7.727000e+10\n3.491300e+10\n4.177000e+09\n2.220000e+09\n-1.140000e+08\n1.107000e+09\n-1.972000e+09\nNaN\n3.950000e+09\n1.385900e+10\n0.0\n-6.100000e+07\n6.147200e+10\n3.073600e+10\n3.073600e+10\n2.119300e+10\n1.575200e+11\n0.0\n3.259500e+10\n3.430000e+09\n-4.043000e+09\n9.800000e+07\n4.236000e+09\n1.761200e+10\n0.0\n1.653200e+10\n0.0\n-2.306000e+09\n5.971900e+10\n-9.075000e+09\n2.141900e+10\n1.348850e+11\n2.325600e+10\n0.000000e+00\n9.243900e+10\n2.327920e+11\n-1.317900e+10\n4.797100e+10\n-2.850400e+10\n1.356760e+11\n3.462000e+10\n5.516400e+10\n1.042240e+11\n2.318000e+09\n1.368190e+11\n1.776280e+11\n-2.306000e+09\n\n\n2019\n5.561000e+09\n-2.354800e+10\nNaN\n1.849800e+10\n1.797000e+09\n-4.340000e+09\nNaN\n4.650000e+08\n7.707000e+09\n7.822000e+09\n5.055200e+10\n7.189600e+10\n7.210000e+08\n1.165100e+10\n0.0\nNaN\n3.592800e+10\n0.0\n-23000000.0\n0.0\n2.062400e+10\n8.996100e+10\n3.962500e+10\n5.282000e+09\n1.979000e+09\n-1.000000e+08\n9.990000e+08\n-4.017000e+09\nNaN\n3.958000e+09\n1.307800e+10\n0.0\n-2.680000e+08\n6.868600e+10\n3.434300e+10\n3.434300e+10\n2.749200e+10\n1.788390e+11\n0.0\n3.592800e+10\n3.063000e+09\n-4.545000e+09\n5.890000e+08\n4.412000e+09\n2.215900e+10\n0.0\n1.447800e+10\n0.0\n-1.232000e+09\n8.458700e+10\n-1.839600e+10\n2.601800e+10\n1.521220e+11\n2.801500e+10\n0.000000e+00\n1.011770e+11\n2.759090e+11\n-2.320900e+10\n5.452000e+10\n-2.949100e+10\n1.525780e+11\n4.522100e+10\n7.446700e+10\n1.259290e+11\n3.697000e+09\n1.618570e+11\n2.014420e+11\n-1.232000e+09\n\n\n2020\n5.589000e+09\n-2.228100e+10\nNaN\n2.646500e+10\n7.967000e+09\n-6.524000e+09\nNaN\n1.329000e+09\n9.349000e+09\n5.813000e+09\n5.851000e+10\n8.473200e+10\n1.084000e+09\n1.367900e+10\n0.0\nNaN\n4.122400e+10\n0.0\n24000000.0\n0.0\n2.117500e+10\n9.779500e+10\n4.808200e+10\n7.813000e+09\n1.445000e+09\n-1.350000e+08\n7.280000e+08\n-9.822000e+09\nNaN\n1.283200e+10\n2.070300e+10\n0.0\n9.661000e+09\n8.053800e+10\n4.026900e+10\n4.026900e+10\n3.138400e+10\n1.999240e+11\n0.0\n4.122400e+10\n5.037000e+09\n-2.920000e+09\n6.800000e+07\n5.490000e+09\n2.800600e+10\n0.0\n1.516000e+10\n0.0\n6.330000e+08\n9.696000e+10\n-3.114900e+10\n2.757300e+10\n1.634010e+11\n2.899800e+10\n9.990000e+08\n1.102290e+11\n3.196160e+11\n-2.440800e+10\n6.512400e+10\n-3.277300e+10\n1.742960e+11\n5.683400e+10\n9.707200e+10\n1.413030e+11\n6.858000e+09\n1.825270e+11\n2.225440e+11\n6.330000e+08\n\n\n2021\n6.037000e+09\n-2.464000e+10\nNaN\n2.094500e+10\n-5.520000e+09\n-9.095000e+09\nNaN\n1.057000e+09\n4.712000e+09\n7.140000e+09\n6.177400e+10\n1.109390e+11\n1.284000e+09\n1.243000e+10\n0.0\nNaN\n7.871400e+10\n0.0\n-287000000.0\n0.0\n2.295600e+10\n1.466980e+11\n9.073400e+10\n1.470100e+10\n1.417000e+09\n-3.460000e+08\n1.170000e+09\n-8.806000e+09\nNaN\n1.284400e+10\n2.954900e+10\n0.0\n-1.236000e+09\n1.520660e+11\n7.603300e+10\n7.603300e+10\n4.027000e+10\n2.272620e+11\n0.0\n7.871400e+10\n6.645000e+09\n-9.852000e+09\n5.410000e+08\n7.054000e+09\n2.920800e+10\n0.0\n1.717300e+10\n0.0\n-1.623000e+09\n1.105580e+11\n-5.027400e+10\n3.156200e+10\n1.914840e+11\n3.642200e+10\n0.000000e+00\n1.187040e+11\n3.592680e+11\n-6.136200e+10\n9.165200e+10\n-3.552300e+10\n1.881430e+11\n6.425400e+10\n1.076330e+11\n1.789230e+11\n1.202000e+10\n2.576370e+11\n2.516350e+11\n-1.623000e+09\n\n\n2022\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\nNaN\n0.000000e+00\n0.0\n0.0\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n\n\nmeta\n2018\n8.200000e+08\n-1.391500e+10\n4.290600e+10\n1.001900e+10\n1.920000e+09\n-1.892000e+09\nNaN\n2.740000e+08\n4.374000e+09\n9.100000e+07\n4.290600e+10\n9.355000e+09\nNaN\n4.315000e+09\n0.0\nNaN\n2.491300e+10\n0.0\n-179000000.0\n0.0\n1.830100e+10\n4.648300e+10\n2.536100e+10\n3.249000e+09\n1.294000e+09\n0.000000e+00\nNaN\n2.449000e+09\nNaN\nNaN\n0.000000e+00\n0.0\n5.000000e+08\n4.422400e+10\n2.211100e+10\n2.211200e+10\n7.587000e+09\n6.453200e+10\n0.0\n2.491300e+10\n2.576000e+09\n1.500000e+07\n-3.600000e+07\n1.000000e+07\n4.494000e+09\n0.0\n6.190000e+09\n0.0\n-7.600000e+08\n2.468300e+10\n-1.608700e+10\n1.027300e+10\n4.198100e+10\n1.129700e+10\nNaN\n3.109500e+10\n9.733400e+10\n-1.557200e+10\n2.927400e+10\n-1.160300e+10\n5.048000e+10\n7.017000e+09\n1.320700e+10\n3.092500e+10\n4.480000e+08\n5.583800e+10\n8.412700e+10\n-7.600000e+08\n\n\n2019\n1.363000e+09\n-1.510200e+10\n4.585100e+10\n1.907900e+10\n9.155000e+09\n-1.961000e+09\nNaN\n2.360000e+08\n4.838000e+09\n8.975000e+09\n0.000000e+00\n1.277000e+10\nNaN\n5.741000e+09\n0.0\nNaN\n2.898600e+10\n0.0\n4000000.0\n0.0\n1.871500e+10\n5.792700e+10\n2.481200e+10\n6.327000e+09\n8.940000e+08\n0.000000e+00\nNaN\n-4.254000e+09\nNaN\nNaN\n8.600000e+07\n0.0\n-7.750000e+08\n3.697000e+10\n1.848500e+10\n1.848500e+10\n9.518000e+09\n8.144500e+10\n0.0\n2.898600e+10\n2.673000e+09\n1.500000e+07\n-3.600000e+07\n8.000000e+06\n1.118600e+10\n0.0\n7.745000e+09\n0.0\n-4.890000e+08\n4.478300e+10\n-6.539000e+09\n1.360000e+10\n5.569200e+10\n1.534100e+10\nNaN\n3.577600e+10\n1.333760e+11\n-7.299000e+09\n3.631400e+10\n-1.986400e+10\n6.622500e+10\n1.505300e+10\n3.232200e+10\n4.171100e+10\n-4.174000e+09\n7.069700e+10\n1.010540e+11\n-4.890000e+08\n\n\n2020\n1.331000e+09\n-1.511500e+10\n5.001800e+10\n1.757600e+10\n-1.325000e+09\n-1.512000e+09\nNaN\n9.100000e+07\n5.462000e+09\n-1.302000e+09\n0.000000e+00\n1.669200e+10\nNaN\n6.862000e+09\n0.0\nNaN\n3.267100e+10\n0.0\n279000000.0\n0.0\n1.905000e+10\n6.927300e+10\n3.318000e+10\n4.034000e+09\n6.230000e+08\n0.000000e+00\nNaN\n-1.452000e+10\nNaN\nNaN\n6.234000e+09\n0.0\n-5.800000e+08\n5.829200e+10\n2.914600e+10\n2.914600e+10\n1.133500e+10\n1.086170e+11\n0.0\n3.267100e+10\n2.758000e+09\n1.240000e+08\n-3.600000e+07\n2.410000e+08\n1.001800e+10\n0.0\n6.414000e+09\n0.0\n9.270000e+08\n5.498100e+10\n-9.836000e+09\n1.844700e+10\n7.734500e+10\n1.815500e+10\nNaN\n4.437800e+10\n1.593160e+11\n-1.029200e+10\n3.874700e+10\n-3.005900e+10\n7.567000e+10\n1.498100e+10\n3.102600e+10\n5.329400e+10\n5.090000e+08\n8.596500e+10\n1.282900e+11\n9.270000e+08\n\n\n2021\n4.083000e+09\n-1.856700e+10\n5.581100e+10\n1.660100e+10\n-1.089000e+09\n-3.110000e+09\nNaN\n1.623000e+09\n9.646000e+09\n2.187000e+09\n0.000000e+00\n2.264900e+10\nNaN\n7.967000e+09\n0.0\nNaN\n4.675300e+10\n0.0\n-474000000.0\n0.0\n1.919700e+10\n9.528000e+10\n4.728400e+10\n7.914000e+09\n6.340000e+08\n0.000000e+00\nNaN\n1.213200e+10\nNaN\nNaN\n6.775000e+09\n0.0\n-6.630000e+08\n7.874000e+10\n3.937000e+10\n3.937000e+10\n1.403900e+10\n1.050480e+11\n0.0\n4.675300e+10\n2.751000e+09\n-1.300000e+07\n-2.840000e+08\n1.490000e+08\n1.269800e+10\n0.0\n6.721000e+09\n0.0\n-6.930000e+08\n6.996400e+10\n-5.005200e+10\n2.465500e+10\n6.976100e+10\n2.387200e+10\nNaN\n3.139700e+10\n1.659870e+11\n-5.072800e+10\n5.768300e+10\n-7.570000e+09\n6.666600e+10\n2.113500e+10\n4.110800e+10\n7.117600e+10\n5.310000e+08\n1.179290e+11\n1.248790e+11\n-6.930000e+08\n\n\n2022\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.0\nNaN\n0.000000e+00\n0.0\n0.0\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\nNaN\nNaN\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n\n\nmsft\n2018\n0.000000e+00\n0.000000e+00\nNaN\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.0\n0.0\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.0\n0.000000e+00\n0.0\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n0.000000e+00\n\n\n2019\n9.382000e+09\n-1.392500e+10\nNaN\n1.135600e+10\n-5.900000e+08\n-2.812000e+09\n5.970000e+08\n4.694000e+09\n-2.521000e+09\n-1.542000e+09\n7.852000e+10\n4.291000e+10\n7.536000e+09\n1.160000e+10\n0.0\n-1.381100e+10\n4.295900e+10\n0.0\n-115000000.0\n0.0\n4.202600e+10\n8.293300e+10\n4.368800e+10\n4.448000e+09\n7.750000e+09\n-2.686000e+09\n2.063000e+09\n5.400000e+08\n1.142000e+09\n6.666200e+10\n2.649000e+09\n0.0\n-4.000000e+09\n7.848000e+10\n3.924000e+10\n3.924000e+10\n2.952400e+10\n5.255400e+10\n0.0\n4.295900e+10\n1.472300e+10\n-6.750000e+08\n-1.241000e+09\n1.013300e+10\n4.586000e+10\n0.0\n3.569900e+10\n0.0\n-3.400000e+08\n4.385600e+10\n-1.954300e+10\n1.687600e+10\n2.415000e+10\n2.309800e+10\n5.516000e+09\n1.224760e+11\n2.865560e+11\n-3.688700e+10\n5.218500e+10\n-1.577300e+10\n1.755520e+11\n6.942000e+10\n1.842260e+11\n8.288400e+10\n7.290000e+08\n1.258430e+11\n1.023300e+11\n-3.400000e+08\n\n\n2020\n1.253000e+10\n-1.544100e+10\nNaN\n1.357600e+10\n2.220000e+09\n-2.577000e+09\n1.680000e+08\n5.230000e+09\n5.577000e+09\n-6.730000e+08\n8.055200e+10\n4.607800e+10\n6.405000e+09\n1.230000e+10\n0.0\n-1.513700e+10\n5.295900e+10\n0.0\n-201000000.0\n0.0\n4.335100e+10\n9.693700e+10\n5.303600e+10\n8.755000e+09\n7.038000e+09\n-2.591000e+09\n1.895000e+09\n6.980000e+09\n1.343000e+09\n5.957800e+10\n2.965000e+09\n0.0\n-5.518000e+09\n8.856200e+10\n4.428100e+10\n4.428100e+10\n3.201100e+10\n6.791500e+10\n0.0\n5.295900e+10\n1.313800e+10\n-3.751000e+09\n-1.241000e+09\n1.151700e+10\n4.600100e+10\n0.0\n3.449200e+10\n0.0\n3.186000e+09\n5.290400e+10\n-2.296800e+10\n1.926900e+10\n3.456600e+10\n2.470900e+10\n3.749000e+09\n1.229160e+11\n3.013110e+11\n-4.603100e+10\n6.067500e+10\n-1.222300e+10\n1.819150e+11\n7.231000e+10\n1.830070e+11\n9.005600e+10\n7.700000e+07\n1.430150e+11\n1.183040e+11\n3.186000e+09\n\n\n2021\n1.516300e+10\n-2.062200e+10\nNaN\n1.422400e+10\n6.480000e+08\n-6.481000e+09\n-7.370000e+08\n7.431000e+09\n5.505000e+09\n1.160000e+09\n8.311100e+10\n5.223200e+10\n7.181000e+09\n1.090000e+10\n0.0\n-1.652100e+10\n6.991600e+10\n0.0\n-29000000.0\n0.0\n4.971100e+10\n1.158560e+11\n7.110200e+10\n9.831000e+09\n7.800000e+09\n-2.330000e+09\n2.636000e+09\n2.876000e+09\n1.693000e+09\n5.007400e+10\n5.984000e+09\n0.0\n-3.750000e+09\n1.225420e+11\n6.127100e+10\n6.127100e+10\n3.804300e+10\n8.447700e+10\n0.0\n6.991600e+10\n1.507500e+10\n-2.523000e+09\n-9.220000e+08\n1.347100e+10\n5.261200e+10\n0.0\n3.168100e+10\n0.0\n1.822000e+09\n7.080300e+10\n-2.738500e+10\n2.071600e+10\n5.705500e+10\n2.522400e+10\n8.072000e+09\n1.160320e+11\n3.337790e+11\n-4.848600e+10\n7.674000e+10\n-2.757700e+10\n1.844060e+11\n8.865700e+10\n1.917910e+11\n9.817200e+10\n1.186000e+09\n1.680880e+11\n1.419880e+11\n1.822000e+09\n\n\n2022\n1.900000e+10\n-2.388600e+10\nNaN\n1.393100e+10\n-2.930000e+08\n-6.834000e+09\n-1.123000e+09\n8.052000e+09\n1.251000e+09\n-3.450000e+08\n8.693900e+10\n6.265000e+10\n1.351500e+10\n1.460000e+10\n0.0\n-1.813500e+10\n8.338300e+10\n0.0\n-141000000.0\n0.0\n6.752400e+10\n1.356200e+11\n8.371600e+10\n1.097800e+10\n1.129800e+10\n-2.047000e+09\n3.742000e+09\n1.843800e+10\n1.841000e+09\n4.703200e+10\n6.891000e+09\n0.0\n-9.023000e+09\n1.454760e+11\n7.273800e+10\n7.273800e+10\n4.426100e+10\n8.772000e+10\n0.0\n8.338300e+10\n2.189700e+10\n-8.630000e+08\n-2.825000e+09\n1.693200e+10\n5.938400e+10\n0.0\n3.085300e+10\n0.0\n-4.678000e+09\n8.754600e+10\n-3.269600e+10\n2.451200e+10\n8.428100e+10\n2.772500e+10\n2.749000e+09\n9.081800e+10\n3.648400e+11\n-5.887600e+10\n8.903500e+10\n-3.031100e+10\n1.696840e+11\n9.508200e+10\n1.982980e+11\n1.148870e+11\n3.330000e+08\n1.982700e+11\n1.665420e+11\n-4.678000e+09\n\n\n\n\n\n\n\nAnd this gets us there!\nAs you can see, every column corresponds to a different variable. The first two are \"ticker\" and \"Year\", which identify the observations. The remainder are financial fundamentals data. We’re ready to do our calculated fields next.\nThis table is equivalent to the second pivot table we made in Excel, where the years are in the columns. There isn’t an easy way to include a slicer for years in Pandas, though we can easily filter the dataset by year. We’ll leave it as the whole time range for now.\n\n\nWhat did we just do?\nIt’s worth outlining what we’ve done in this series of dataframe transformations.\nOur first dataframe, big_tech, was very simple. One column for what \"Breakdown\" is being covered, one for which company’s \"ticker\", and each column after that is a year. The rows have values for that breakdown, company, and year. This wasn’t very useful. We want to compare each company’s variables across years, and it’s hard to plot that from this format. As well, matching multiple variables in the same year is very hard, so we can’t make our calculated fields.\nThe melt() Pandas function takes you from “wide” format (where one variable’s information is in multiple columns) and to “long” format (by breaking the rows apart and stacking them up). So, we melted big_tech to big_tech_melt. This turned each row into a ticker/year/breakdown combo, which is an improvement. But we still need to get the columns to be the different variables for each company, matched by year. Each row has to be for one company for one year. big_tech_melt cannot offer this yet.\nBy using a pivot table, we got there. table_2_equiv is our version of the second pivot table (with years in the columns) in the Excel section. The dataframe is a grid. Every column is a different variable, and every row corresponds to a single company in a single year. Now that it’s Tidy, it’s easy to do column operations, plotting, modelling, or whatever else we feel like.\n\n\nCalculated Items\n\n# table 2 calculated items\n\n# copying to create new dataframe so we can still use `table_2_equiv` if desired\ntable_2_calculations = table_2_equiv.copy()\n\n# we access the columns with their names in square brackets, and do normal Python math operations\ntable_2_calculations[\"CurrentRatio\"] = table_2_calculations[\"totalCurrentAssets\"]/table_2_calculations[\"totalCurrentLiabilities\"]\ntable_2_calculations[\"DebtRatio\"] = table_2_calculations[\"totalLiab\"]/table_2_calculations[\"totalAssets\"]\ntable_2_calculations[\"ProfitMargin_OperatingProfit\"] = table_2_calculations[\"operatingIncome\"]/table_2_calculations[\"totalRevenue\"]\ntable_2_calculations[\"ProfitMargin_NetIncome\"] = table_2_calculations[\"netIncomeApplicableToCommonShares\"]/table_2_calculations[\"totalRevenue\"]\ntable_2_calculations[\"InterestCoverage\"] = table_2_calculations[\"operatingIncome\"]/table_2_calculations[\"interestExpense\"]\n\n# now we filter to just the variables of interest\ntable_2_calculations = table_2_calculations[[\"CurrentRatio\", \"DebtRatio\", \"ProfitMargin_OperatingProfit\", \"ProfitMargin_NetIncome\", \"InterestCoverage\"]]\ntable_2_calculations\n\n\n\n\n\n\n\n\nBreakdown\nCurrentRatio\nDebtRatio\nProfitMargin_OperatingProfit\nProfitMargin_NetIncome\nInterestCoverage\n\n\nticker\nYear\n\n\n\n\n\n\n\n\n\naapl\n2018\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2019\n1.540126\n0.732692\n0.245720\n0.212381\n-17.877517\n\n\n2020\n1.363604\n0.798267\n0.241473\n0.209136\n-23.072746\n\n\n2021\n1.074553\n0.820257\n0.297824\n0.258818\n-41.190548\n\n\n2022\n0.879356\n0.856354\n0.302887\n0.253096\n-40.749574\n\n\namzn\n2018\n1.098112\n0.732250\n0.053335\n0.043253\n-8.765702\n\n\n2019\n1.097048\n0.724481\n0.051836\n0.041309\n-9.088125\n\n\n2020\n1.050227\n0.709198\n0.059314\n0.055252\n-13.903461\n\n\n2021\n1.135760\n0.671275\n0.052954\n0.071014\n-13.752902\n\n\n2022\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ngoog\n2018\n3.919006\n0.236967\n0.238234\n0.224647\n-285.921053\n\n\n2019\n3.374052\n0.269897\n0.221974\n0.212181\n-359.280000\n\n\n2020\n3.066756\n0.303714\n0.225852\n0.220619\n-305.362963\n\n\n2021\n2.928113\n0.299590\n0.305523\n0.295117\n-227.497110\n\n\n2022\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmeta\n2018\n7.193958\n0.135687\n0.446166\n0.395985\ninf\n\n\n2019\n4.399455\n0.242337\n0.410003\n0.261468\ninf\n\n\n2020\n5.051065\n0.194745\n0.380050\n0.339045\ninf\n\n\n2021\n3.154294\n0.247658\n0.396450\n0.333845\ninf\n\n\n2022\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmsft\n2018\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2019\n2.528839\n0.642897\n0.341370\n0.311817\n-15.993671\n\n\n2020\n2.515765\n0.607369\n0.370304\n0.309625\n-20.439599\n\n\n2021\n2.079994\n0.574605\n0.415949\n0.364517\n-30.006867\n\n\n2022\n1.784607\n0.543520\n0.420553\n0.366863\n-40.734245\n\n\n\n\n\n\n\nI cannot plot this - I need to reset the index and fill the NaN values with 0.\n\ntable_2_calculations_resetindex = table_2_calculations.reset_index()\nt2_nanzero = table_2_calculations_resetindex.fillna(0)\nt2_nanzero\n\n\n\n\n\n\n\nBreakdown\nticker\nYear\nCurrentRatio\nDebtRatio\nProfitMargin_OperatingProfit\nProfitMargin_NetIncome\nInterestCoverage\n\n\n\n\n0\naapl\n2018\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n1\naapl\n2019\n1.540126\n0.732692\n0.245720\n0.212381\n-17.877517\n\n\n2\naapl\n2020\n1.363604\n0.798267\n0.241473\n0.209136\n-23.072746\n\n\n3\naapl\n2021\n1.074553\n0.820257\n0.297824\n0.258818\n-41.190548\n\n\n4\naapl\n2022\n0.879356\n0.856354\n0.302887\n0.253096\n-40.749574\n\n\n5\namzn\n2018\n1.098112\n0.732250\n0.053335\n0.043253\n-8.765702\n\n\n6\namzn\n2019\n1.097048\n0.724481\n0.051836\n0.041309\n-9.088125\n\n\n7\namzn\n2020\n1.050227\n0.709198\n0.059314\n0.055252\n-13.903461\n\n\n8\namzn\n2021\n1.135760\n0.671275\n0.052954\n0.071014\n-13.752902\n\n\n9\namzn\n2022\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n10\ngoog\n2018\n3.919006\n0.236967\n0.238234\n0.224647\n-285.921053\n\n\n11\ngoog\n2019\n3.374052\n0.269897\n0.221974\n0.212181\n-359.280000\n\n\n12\ngoog\n2020\n3.066756\n0.303714\n0.225852\n0.220619\n-305.362963\n\n\n13\ngoog\n2021\n2.928113\n0.299590\n0.305523\n0.295117\n-227.497110\n\n\n14\ngoog\n2022\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n15\nmeta\n2018\n7.193958\n0.135687\n0.446166\n0.395985\ninf\n\n\n16\nmeta\n2019\n4.399455\n0.242337\n0.410003\n0.261468\ninf\n\n\n17\nmeta\n2020\n5.051065\n0.194745\n0.380050\n0.339045\ninf\n\n\n18\nmeta\n2021\n3.154294\n0.247658\n0.396450\n0.333845\ninf\n\n\n19\nmeta\n2022\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n20\nmsft\n2018\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n21\nmsft\n2019\n2.528839\n0.642897\n0.341370\n0.311817\n-15.993671\n\n\n22\nmsft\n2020\n2.515765\n0.607369\n0.370304\n0.309625\n-20.439599\n\n\n23\nmsft\n2021\n2.079994\n0.574605\n0.415949\n0.364517\n-30.006867\n\n\n24\nmsft\n2022\n1.784607\n0.543520\n0.420553\n0.366863\n-40.734245\n\n\n\n\n\n\n\nNow it’s ready for plotting. I’m going to make a series of grouped bar plots. Each barplot shows one variable for each company and year.\n\n\nMaking Pivot Table Plots\n\n1. Current Ratio Plot\n\nbars = sns.barplot(data=table_2_calculations_resetindex, x = \"ticker\", y = \"CurrentRatio\", hue=\"Year\", palette = \"mako\")\n\nplt.xlabel(\"Firm\")\nplt.ylabel(\"Current Ratio\")\nplt.title(\"Big Tech Current Ratio by Year\")\n\nText(0.5, 1.0, 'Big Tech Current Ratio by Year')\n\n\n\n\n\n\n\n2. Debt Ratio Plot\n\nx = np.array([0.0, 2.0, 4.0, 6.0])\n\nbars = sns.barplot(data=table_2_calculations_resetindex, x = \"ticker\", y = \"DebtRatio\", hue=\"Year\", palette = \"mako\")\n\nplt.xlabel(\"Firm\")\nplt.ylabel(\"Debt Ratio\")\nplt.title(\"Big Tech Debt Ratio by Year\")\n\nText(0.5, 1.0, 'Big Tech Debt Ratio by Year')\n\n\n\n\n\n\n\n3. Profit Margin (Operating Profit) Plot\n\nbars = sns.barplot(data=table_2_calculations_resetindex, x = \"ticker\", y = \"ProfitMargin_OperatingProfit\", hue=\"Year\", palette = \"mako\")\n\nplt.xlabel(\"Firm\")\nplt.ylabel(\"Profit Margin (Using Operating Profit)\")\nplt.title(\"Big Tech Profit Margin (Operating Profits) by Year\")\n\nText(0.5, 1.0, 'Big Tech Profit Margin (Operating Profits) by Year')\n\n\n\n\n\n\n\n4. Profit Margin (Net Income) Plot\n\nbars = sns.barplot(data=table_2_calculations_resetindex, x = \"ticker\", y = \"ProfitMargin_NetIncome\", hue=\"Year\", palette = \"mako\")\n\nplt.xlabel(\"Firm\")\nplt.ylabel(\"Profit Margin (Using Net Income)\")\nplt.title(\"Big Tech Profit Margin (Available Income) by Year\")\n\nText(0.5, 1.0, 'Big Tech Profit Margin (Available Income) by Year')\n\n\n\n\n\n\n\n5. Interest Coverage Plot\n\n# Interest Coverage plot\n\nbars = sns.barplot(data=table_2_calculations_resetindex, x = \"ticker\", y = \"InterestCoverage\", hue=\"Year\", palette = \"mako\")\n\nplt.xlabel(\"Firm\")\nplt.ylabel(\"Interest Coverage\")\nplt.title(\"Big Tech Interest Coverage by Year\")\n\nText(0.5, 1.0, 'Big Tech Interest Coverage by Year')\n\n\n\n\n\nNote that meta’s Interest Coverage value comes up empty, but is actually infinite! This is because their interestExpense variable is 0.0, and the divide by 0 creates an infinite value for Interest Coverage.\n\ntable_2_calculations\n\n\n\n\n\n\n\n\nBreakdown\nCurrentRatio\nDebtRatio\nProfitMargin_OperatingProfit\nProfitMargin_NetIncome\nInterestCoverage\n\n\nticker\nYear\n\n\n\n\n\n\n\n\n\naapl\n2018\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2019\n1.540126\n0.732692\n0.245720\n0.212381\n-17.877517\n\n\n2020\n1.363604\n0.798267\n0.241473\n0.209136\n-23.072746\n\n\n2021\n1.074553\n0.820257\n0.297824\n0.258818\n-41.190548\n\n\n2022\n0.879356\n0.856354\n0.302887\n0.253096\n-40.749574\n\n\namzn\n2018\n1.098112\n0.732250\n0.053335\n0.043253\n-8.765702\n\n\n2019\n1.097048\n0.724481\n0.051836\n0.041309\n-9.088125\n\n\n2020\n1.050227\n0.709198\n0.059314\n0.055252\n-13.903461\n\n\n2021\n1.135760\n0.671275\n0.052954\n0.071014\n-13.752902\n\n\n2022\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ngoog\n2018\n3.919006\n0.236967\n0.238234\n0.224647\n-285.921053\n\n\n2019\n3.374052\n0.269897\n0.221974\n0.212181\n-359.280000\n\n\n2020\n3.066756\n0.303714\n0.225852\n0.220619\n-305.362963\n\n\n2021\n2.928113\n0.299590\n0.305523\n0.295117\n-227.497110\n\n\n2022\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmeta\n2018\n7.193958\n0.135687\n0.446166\n0.395985\ninf\n\n\n2019\n4.399455\n0.242337\n0.410003\n0.261468\ninf\n\n\n2020\n5.051065\n0.194745\n0.380050\n0.339045\ninf\n\n\n2021\n3.154294\n0.247658\n0.396450\n0.333845\ninf\n\n\n2022\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nmsft\n2018\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2019\n2.528839\n0.642897\n0.341370\n0.311817\n-15.993671\n\n\n2020\n2.515765\n0.607369\n0.370304\n0.309625\n-20.439599\n\n\n2021\n2.079994\n0.574605\n0.415949\n0.364517\n-30.006867\n\n\n2022\n1.784607\n0.543520\n0.420553\n0.366863\n-40.734245\n\n\n\n\n\n\n\n\ntable_2_equiv[\"interestExpense\"]\n\nticker  Year\naapl    2018    0.000000e+00\n        2019   -3.576000e+09\n        2020   -2.873000e+09\n        2021   -2.645000e+09\n        2022   -2.931000e+09\namzn    2018   -1.417000e+09\n        2019   -1.600000e+09\n        2020   -1.647000e+09\n        2021   -1.809000e+09\n        2022    0.000000e+00\ngoog    2018   -1.140000e+08\n        2019   -1.000000e+08\n        2020   -1.350000e+08\n        2021   -3.460000e+08\n        2022    0.000000e+00\nmeta    2018    0.000000e+00\n        2019    0.000000e+00\n        2020    0.000000e+00\n        2021    0.000000e+00\n        2022    0.000000e+00\nmsft    2018    0.000000e+00\n        2019   -2.686000e+09\n        2020   -2.591000e+09\n        2021   -2.330000e+09\n        2022   -2.047000e+09\nName: interestExpense, dtype: float64"
  }
]